/* tslint:disable */
/* eslint-disable */
/*
Visier Object Configuration APIs

Visier APIs for managing objects in studio experience

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticObjectFilterDTO } from '../models';
// @ts-ignore
import { CalculationConceptConfigurationMapDTO } from '../models';
// @ts-ignore
import { CalculationConceptDTO } from '../models';
// @ts-ignore
import { CalculationConceptListDTO } from '../models';
// @ts-ignore
import { ConceptConfigurationResultDTO } from '../models';
// @ts-ignore
import { PerspectiveConfigurationDTO } from '../models';
// @ts-ignore
import { SelectionConceptConfigurationMapDTO } from '../models';
// @ts-ignore
import { SelectionConceptDTO } from '../models';
// @ts-ignore
import { SelectionConceptListDTO } from '../models';
// @ts-ignore
import { Status } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ObjectConfigurationApi - axios parameter creator
 * @export
 */
export const ObjectConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to retrieve the configuration details of a calculation concept in production.
         * @summary Retrieve the configuration of a calculation concept
         * @param {string} conceptId The ID of the concept to retrieve the configuration for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationConcept: async (conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getCalculationConcept', 'conceptId', conceptId)
            const localVarPath = `/v1/admin/calculation-concepts/{conceptId}`
                .replace(`{${"conceptId"}}`, encodeURIComponent(String(conceptId !== undefined ? conceptId : `-conceptId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/calculation-concepts/{conceptId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the calculation concepts available in production.
         * @summary Retrieve all calculation concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationConcepts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/calculation-concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/calculation-concepts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the configuration details of a selection concept in production.
         * @summary Retrieve the configuration of a selection concept
         * @param {string} conceptId The ID of the concept to retrieve the configuration for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectionConcept: async (conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getSelectionConcept', 'conceptId', conceptId)
            const localVarPath = `/v1/admin/selection-concepts/{conceptId}`
                .replace(`{${"conceptId"}}`, encodeURIComponent(String(conceptId !== undefined ? conceptId : `-conceptId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/selection-concepts/{conceptId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the selection concepts available in production.
         * @summary Retrieve all selection concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectionConcepts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/selection-concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/selection-concepts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to nodes in a calculation concept
         * @param {string} conceptId The UUID of the concept to configure.
         * @param {CalculationConceptConfigurationMapDTO} calculationConceptConfigurationMapDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapCalculationConcept: async (conceptId: string, calculationConceptConfigurationMapDTO: CalculationConceptConfigurationMapDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('mapCalculationConcept', 'conceptId', conceptId)
            // verify required parameter 'calculationConceptConfigurationMapDTO' is not null or undefined
            assertParamExists('mapCalculationConcept', 'calculationConceptConfigurationMapDTO', calculationConceptConfigurationMapDTO)
            const localVarPath = `/v1/admin/calculation-concepts/{conceptId}/configure`
                .replace(`{${"conceptId"}}`, encodeURIComponent(String(conceptId !== undefined ? conceptId : `-conceptId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: calculationConceptConfigurationMapDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/calculation-concepts/{conceptId}/configure',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(calculationConceptConfigurationMapDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to a selection concept
         * @param {string} conceptId The UUID of the concept to configure.
         * @param {SelectionConceptConfigurationMapDTO} selectionConceptConfigurationMapDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapSelectionConcept: async (conceptId: string, selectionConceptConfigurationMapDTO: SelectionConceptConfigurationMapDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('mapSelectionConcept', 'conceptId', conceptId)
            // verify required parameter 'selectionConceptConfigurationMapDTO' is not null or undefined
            assertParamExists('mapSelectionConcept', 'selectionConceptConfigurationMapDTO', selectionConceptConfigurationMapDTO)
            const localVarPath = `/v1/admin/selection-concepts/{conceptId}/configure`
                .replace(`{${"conceptId"}}`, encodeURIComponent(String(conceptId !== undefined ? conceptId : `-conceptId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: selectionConceptConfigurationMapDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/selection-concepts/{conceptId}/configure',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(selectionConceptConfigurationMapDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectConfigurationApi - functional programming interface
 * @export
 */
export const ObjectConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to retrieve the configuration details of a calculation concept in production.
         * @summary Retrieve the configuration of a calculation concept
         * @param {ObjectConfigurationApiGetCalculationConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalculationConcept(requestParameters: ObjectConfigurationApiGetCalculationConceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculationConceptDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalculationConcept(requestParameters.conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the calculation concepts available in production.
         * @summary Retrieve all calculation concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalculationConcepts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculationConceptListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalculationConcepts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the configuration details of a selection concept in production.
         * @summary Retrieve the configuration of a selection concept
         * @param {ObjectConfigurationApiGetSelectionConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelectionConcept(requestParameters: ObjectConfigurationApiGetSelectionConceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectionConceptDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelectionConcept(requestParameters.conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the selection concepts available in production.
         * @summary Retrieve all selection concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelectionConcepts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectionConceptListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelectionConcepts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to nodes in a calculation concept
         * @param {ObjectConfigurationApiMapCalculationConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapCalculationConcept(requestParameters: ObjectConfigurationApiMapCalculationConceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptConfigurationResultDTO>> {
            const calculationConceptConfigurationMapDTO: CalculationConceptConfigurationMapDTO = {
                perspectivesToMap: requestParameters.perspectivesToMap
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapCalculationConcept(requestParameters.conceptId, calculationConceptConfigurationMapDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to a selection concept
         * @param {ObjectConfigurationApiMapSelectionConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapSelectionConcept(requestParameters: ObjectConfigurationApiMapSelectionConceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptConfigurationResultDTO>> {
            const selectionConceptConfigurationMapDTO: SelectionConceptConfigurationMapDTO = {
                analyticObjectFiltersToMap: requestParameters.analyticObjectFiltersToMap
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapSelectionConcept(requestParameters.conceptId, selectionConceptConfigurationMapDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectConfigurationApi - factory interface
 * @export
 */
export const ObjectConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectConfigurationApiFp(configuration)
    return {
        /**
         * This API allows you to retrieve the configuration details of a calculation concept in production.
         * @summary Retrieve the configuration of a calculation concept
         * @param {ObjectConfigurationApiGetCalculationConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationConcept(requestParameters: ObjectConfigurationApiGetCalculationConceptRequest, options?: AxiosRequestConfig): AxiosPromise<CalculationConceptDTO> {
            return localVarFp.getCalculationConcept(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the calculation concepts available in production.
         * @summary Retrieve all calculation concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationConcepts(options?: AxiosRequestConfig): AxiosPromise<CalculationConceptListDTO> {
            return localVarFp.getCalculationConcepts(options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the configuration details of a selection concept in production.
         * @summary Retrieve the configuration of a selection concept
         * @param {ObjectConfigurationApiGetSelectionConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectionConcept(requestParameters: ObjectConfigurationApiGetSelectionConceptRequest, options?: AxiosRequestConfig): AxiosPromise<SelectionConceptDTO> {
            return localVarFp.getSelectionConcept(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the selection concepts available in production.
         * @summary Retrieve all selection concepts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectionConcepts(options?: AxiosRequestConfig): AxiosPromise<SelectionConceptListDTO> {
            return localVarFp.getSelectionConcepts(options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to nodes in a calculation concept
         * @param {ObjectConfigurationApiMapCalculationConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapCalculationConcept(requestParameters: ObjectConfigurationApiMapCalculationConceptRequest, options?: AxiosRequestConfig): AxiosPromise<ConceptConfigurationResultDTO> {
            return localVarFp.mapCalculationConcept(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
         * @summary Map dimension members to a selection concept
         * @param {ObjectConfigurationApiMapSelectionConceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapSelectionConcept(requestParameters: ObjectConfigurationApiMapSelectionConceptRequest, options?: AxiosRequestConfig): AxiosPromise<ConceptConfigurationResultDTO> {
            return localVarFp.mapSelectionConcept(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCalculationConcept operation in ObjectConfigurationApi.
 * @export
 * @interface ObjectConfigurationApiGetCalculationConceptRequest
 */
export type ObjectConfigurationApiGetCalculationConceptRequest = {
    
    /**
    * The ID of the concept to retrieve the configuration for.
    * @type {string}
    * @memberof ObjectConfigurationApiGetCalculationConcept
    */
    readonly conceptId: string
    
}

/**
 * Request parameters for getSelectionConcept operation in ObjectConfigurationApi.
 * @export
 * @interface ObjectConfigurationApiGetSelectionConceptRequest
 */
export type ObjectConfigurationApiGetSelectionConceptRequest = {
    
    /**
    * The ID of the concept to retrieve the configuration for.
    * @type {string}
    * @memberof ObjectConfigurationApiGetSelectionConcept
    */
    readonly conceptId: string
    
}

/**
 * Request parameters for mapCalculationConcept operation in ObjectConfigurationApi.
 * @export
 * @interface ObjectConfigurationApiMapCalculationConceptRequest
 */
export type ObjectConfigurationApiMapCalculationConceptRequest = {
    
    /**
    * The UUID of the concept to configure.
    * @type {string}
    * @memberof ObjectConfigurationApiMapCalculationConcept
    */
    readonly conceptId: string
    
} & CalculationConceptConfigurationMapDTO

/**
 * Request parameters for mapSelectionConcept operation in ObjectConfigurationApi.
 * @export
 * @interface ObjectConfigurationApiMapSelectionConceptRequest
 */
export type ObjectConfigurationApiMapSelectionConceptRequest = {
    
    /**
    * The UUID of the concept to configure.
    * @type {string}
    * @memberof ObjectConfigurationApiMapSelectionConcept
    */
    readonly conceptId: string
    
} & SelectionConceptConfigurationMapDTO

/**
 * ObjectConfigurationApiGenerated - object-oriented interface
 * @export
 * @class ObjectConfigurationApiGenerated
 * @extends {BaseAPI}
 */
export class ObjectConfigurationApiGenerated extends BaseAPI {
    /**
     * This API allows you to retrieve the configuration details of a calculation concept in production.
     * @summary Retrieve the configuration of a calculation concept
     * @param {ObjectConfigurationApiGetCalculationConceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public getCalculationConcept(requestParameters: ObjectConfigurationApiGetCalculationConceptRequest, options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).getCalculationConcept(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the calculation concepts available in production.
     * @summary Retrieve all calculation concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public getCalculationConcepts(options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).getCalculationConcepts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the configuration details of a selection concept in production.
     * @summary Retrieve the configuration of a selection concept
     * @param {ObjectConfigurationApiGetSelectionConceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public getSelectionConcept(requestParameters: ObjectConfigurationApiGetSelectionConceptRequest, options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).getSelectionConcept(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the selection concepts available in production.
     * @summary Retrieve all selection concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public getSelectionConcepts(options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).getSelectionConcepts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     * @summary Map dimension members to nodes in a calculation concept
     * @param {ObjectConfigurationApiMapCalculationConceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public mapCalculationConcept(requestParameters: ObjectConfigurationApiMapCalculationConceptRequest, options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).mapCalculationConcept(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     * @summary Map dimension members to a selection concept
     * @param {ObjectConfigurationApiMapSelectionConceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectConfigurationApiGenerated
     */
    public mapSelectionConcept(requestParameters: ObjectConfigurationApiMapSelectionConceptRequest, options?: AxiosRequestConfig) {
        return ObjectConfigurationApiFp(this.configuration).mapSelectionConcept(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
